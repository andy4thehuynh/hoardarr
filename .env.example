# ========================================
# .env.example
# ========================================

# Flask Configuration
FLASK_SECRET_KEY=generate-a-random-secret-key-here
FLASK_ENV=development
FLASK_DEBUG=true

# Reddit OAuth
REDDIT_CLIENT_ID=your-reddit-client-id
REDDIT_CLIENT_SECRET=your-reddit-client-secret
REDDIT_REDIRECT_URI=http://localhost:5000/api/auth/reddit/callback
REDDIT_USER_AGENT=Hoardarr/1.0

# GitHub OAuth
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=http://localhost:5000/api/auth/github/callback

# Couchbase Capella
COUCHBASE_CONNECTION_STRING=couchbases://your-cluster.cloud.couchbase.com
COUCHBASE_USERNAME=your-username
COUCHBASE_PASSWORD=your-password
COUCHBASE_BUCKET=hoardarr

# OpenAI (for embeddings)
OPENAI_API_KEY=sk-...

# Anthropic (for RAG chat)
ANTHROPIC_API_KEY=sk-ant-...

# TikTok Metadata Service (optional - if using paid service)
# TIKTOK_API_KEY=your-api-key
# TIKTOK_API_URL=https://api.tikapi.io

# Token Encryption
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_KEY=your-fernet-encryption-key


# ========================================
# README.md
# ========================================

# Hoardarr

**Personal Content RAG System** - Aggregate your saved content from Reddit, GitHub, and TikTok, then chat with it using AI.

---

## What is This?

Hoardarr collects your saved/favorited content from multiple platforms, vectorizes it using embeddings, and lets you search and chat with your personal knowledge base using RAG (Retrieval-Augmented Generation).

**Supported Sources**:
- **Reddit**: Saved posts and comments
- **GitHub**: Starred repositories  
- **TikTok**: Favorited videos (via data export)

**Features**:
- 🔍 Semantic search across all your content
- 💬 Chat with Claude AI about your saved items
- 🏷️ Filter by subreddit, topic, or hashtag
- 🔄 Automatic sync (Reddit, GitHub) or manual upload (TikTok)
- 🔒 Your data stays in your Couchbase instance

---

## Tech Stack

- **Backend**: Python 3.11+, Flask
- **Frontend**: Vue 3 (Composition API)
- **Database**: Couchbase Capella (vector search)
- **AI**: OpenAI embeddings, Anthropic Claude 3.5 Haiku
- **Auth**: OAuth 2.0

---

## Architecture

```
Vue Frontend → Flask API → Providers (Reddit/GitHub/TikTok)
                   ↓
              Vectorization (OpenAI)
                   ↓
          Couchbase Capella (vector DB)
                   ↓
          RAG Search → Claude Chat
```

See: `docs/architecture.md` for detailed design.

---

## Prerequisites

### External Accounts Needed

1. **Couchbase Capella** (free tier available)
   - Sign up: https://cloud.couchbase.com
   - Create bucket: `hoardarr`
   - Create collections: `reddit_content`, `github_stars`, `tiktok_favorites`, `sync_metadata`

2. **Reddit App** (free)
   - Register: https://www.reddit.com/prefs/apps
   - Type: Web app
   - Redirect URI: `http://localhost:5000/api/auth/reddit/callback`

3. **GitHub OAuth App** (free)
   - Register: https://github.com/settings/developers
   - Callback URL: `http://localhost:5000/api/auth/github/callback`

4. **OpenAI API Key** (paid)
   - Get key: https://platform.openai.com/api-keys
   - Costs: ~$0.02 per 1M tokens for embeddings

5. **Anthropic API Key** (paid)
   - Get key: https://console.anthropic.com
   - Costs: ~$0.80 per 1M tokens for Claude 3.5 Haiku

---

## Quick Start

### 1. Clone and Setup

```bash
git clone <your-repo>
cd hoardarr
```

### 2. Backend Setup

```bash
cd backend

# Create virtual environment
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt

# Setup environment
cp .env.example .env
# Edit .env with your credentials

# Test connection
python -c "from services.couchbase_service import CouchbaseService; db = CouchbaseService(); db.connect(); print('Connected!')"

# Run server
python app.py
# Server runs on http://localhost:5000
```

### 3. Frontend Setup

```bash
cd frontend

# Install dependencies
npm install

# Run dev server
npm run dev
# Opens http://localhost:3000
```

### 4. Create Vector Index (Manual Step)

In Couchbase Capella UI:
1. Go to **Search** → **Add Index**
2. Name: `content_vector_index`
3. Type: **Vector Search**
4. Collections: Select all three content collections
5. Vector field: `embedding` (1536 dimensions, cosine similarity)
6. Add filter field: `user_id` (keyword type)
7. Create

See: `docs/database.md` for detailed instructions.

---

## Usage

### Connect Your Accounts

1. Visit http://localhost:3000
2. Click "Connect Reddit" → authorize
3. Click "Connect GitHub" → authorize
4. For TikTok:
   - Request data export from TikTok (Settings → Privacy → Download Data)
   - Wait 2-7 days for file
   - Upload `user_data.json` in the app

### Sync Your Content

Reddit/GitHub sync automatically on first connect. To resync:
- Click "Sync Now" button for each provider
- Or trigger via API: `POST /api/sync/reddit`

### Search and Chat

- **Browse**: Click "Reddit" or "GitHub" in nav to see your saved items
- **Filter**: Use dropdowns to filter by subreddit/topic/hashtag
- **Chat**: Click "Chat" and ask questions about your content
  - "What Python tutorials did I save?"
  - "Show me articles about machine learning"
  - "Which GitHub repos are about web development?"

---

## Project Structure

```
hoardarr/
├── claude.md                    # Main context file for AI assistants
├── .env.example                 # Environment template
├── README.md                    # This file
│
├── docs/                        # Detailed documentation
│   ├── architecture.md          # System design
│   ├── providers.md             # Provider implementation guide
│   ├── database.md              # Schema and queries
│   ├── api-endpoints.md         # API reference
│   ├── sync-strategy.md         # Sync algorithms
│   ├── vectorization.md         # Embeddings and RAG
│   ├── development-guide.md     # Dev workflows
│   └── implementation-tasks.md  # Step-by-step build plan
│
├── backend/
│   ├── app.py                   # Flask app entry point
│   ├── config.py                # Configuration loader
│   ├── requirements.txt         # Python dependencies
│   │
│   ├── routes/                  # API endpoints
│   │   ├── auth.py              # OAuth flows
│   │   ├── sync.py              # Sync triggers
│   │   ├── content.py           # Content retrieval
│   │   ├── chat.py              # RAG chat
│   │   └── upload.py            # TikTok uploads
│   │
│   ├── providers/               # Content source integrations
│   │   ├── base_provider.py
│   │   ├── api_provider.py
│   │   ├── file_upload_provider.py
│   │   ├── reddit_provider.py
│   │   ├── github_provider.py
│   │   └── tiktok_provider.py
│   │
│   ├── services/                # Business logic
│   │   ├── couchbase_service.py
│   │   ├── embedding_service.py
│   │   ├── vectorizer.py
│   │   └── rag_service.py
│   │
│   └── models/                  # Data models
│       ├── reddit_content.py
│       ├── github_star.py
│       └── tiktok_favorite.py
│
└── frontend/
    ├── package.json
    ├── vite.config.js
    ├── index.html
    │
    └── src/
        ├── main.js              # Vue app entry
        ├── App.vue              # Root component
        │
        ├── router/              # Vue router
        │   └── index.js
        │
        ├── views/               # Page components
        │   ├── Home.vue         # OAuth connections
        │   ├── RedditView.vue   # Reddit content list
        │   ├── GitHubView.vue   # GitHub stars list
        │   ├── TikTokView.vue   # TikTok favorites + upload
        │   └── ChatView.vue     # RAG chat interface
        │
        ├── components/          # Reusable components
        │   ├── OAuthButton.vue
        │   ├── SyncButton.vue
        │   ├── ContentList.vue
        │   └── ChatMessage.vue
        │
        └── services/
            └── api.js           # API client (Axios)
```

---

## Development

### For Learning with AI Assistants

This project is designed to be built step-by-step with AI guidance:

1. **Read**: `claude.md` in the root (main context)
2. **Follow**: 17 tasks in `docs/implementation-tasks.md`
3. **Reference**: Detailed docs in `docs/` as needed
4. **Ask**: Claude Code or similar AI assistants for guidance

**Key principle**: You write the code, AI reviews and guides.

See: `docs/development-guide.md` for workflows.

---

### Testing

```bash
# Backend unit tests (optional)
cd backend
pytest

# Manual API testing
curl http://localhost:5000/health
curl -X POST http://localhost:5000/api/sync/reddit \
  -H "Content-Type: application/json" \
  -d '{"user_id": "your_username"}'

# Frontend (browser)
npm run dev
# Test OAuth flows, sync, filters, chat
```

---

## Adding New Providers

Want to add Twitter, YouTube, or other sources?

1. Decide: API-based or file-based?
2. Create provider class (extend `APIProvider` or `FileUploadProvider`)
3. Implement 4-5 required methods
4. Add OAuth routes (if API-based)
5. Add sync route
6. Create Couchbase collection
7. Add frontend view

See: `docs/providers.md` for step-by-step guide.

---

## Troubleshooting

### "OAuth isn't working"
- Check `.env` has correct credentials
- Verify redirect URIs match exactly
- Check browser console for errors

### "Sync returns no items"  
- Verify OAuth tokens not expired
- Check rate limits (Reddit: 60/min, GitHub: 5k/hr)
- Test API calls directly with curl

### "Vector search returns nothing"
- Ensure vector index exists in Couchbase UI
- Verify embeddings are stored (check a document)
- Test search without filters first

### "Chat responses are poor"
- Check if vector search returns relevant items
- Verify enough content in database
- Test Claude prompt in console separately

Full troubleshooting: `docs/development-guide.md`

---

## Costs

**Estimated monthly costs** (for moderate personal use):

- Couchbase Capella: **Free** (free tier)
- OpenAI Embeddings: **~$1-5** (depending on content volume)
- Claude 3.5 Haiku: **~$1-3** (for chat)
- Reddit API: **Free**
- GitHub API: **Free**
- TikTok: **Free** (data export) or **$50-100/month** (metadata service)

**Total**: ~$2-10/month (without TikTok metadata service)

---

## Privacy & Data

- **Your data stays in your Couchbase instance** (you control it)
- OAuth tokens stored encrypted
- No data sent to third parties except:
  - OpenAI (for embeddings - only text, not full content)
  - Anthropic (for chat responses - retrieved context only)
- You can delete all data anytime

---

## Limitations

- **TikTok**: Manual upload required (no automatic sync)
- **Reddit**: Rate limited to 60 requests/minute
- **GitHub**: Rate limited to 5,000 requests/hour
- **Personal use**: Not designed for multiple concurrent users
- **Demo UI**: Functional but not polished

---

## Future Enhancements

Possible additions (not implemented):
- YouTube watch history
- Twitter bookmarks
- HackerNews upvotes
- Browser extension for one-click saving
- Advanced filters (date range, score threshold)
- Export functionality
- Real-time sync with webhooks
- Mobile app

---

## Contributing

This is a learning project. If you build on it:
1. Fork the repo
2. Add your provider
3. Update docs
4. Submit PR

---

## License

[Choose your license - MIT recommended]

---

## Support

- **Issues**: Open GitHub issue
- **Questions**: Check `docs/` first
- **New features**: See `docs/providers.md` for adding sources

---

## Acknowledgments

Built with:
- Flask, Vue 3, Couchbase
- OpenAI, Anthropic
- Reddit, GitHub APIs

---
